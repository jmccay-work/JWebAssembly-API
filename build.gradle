//https://ant.apache.org/manual/api/org/apache/tools/ant/taskdefs/condition/Os.html
import org.apache.tools.ant.taskdefs.condition.Os 
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

// Allow people to developers who build their own to put in a private/company script to
// load the custom maven publishing repository
// Set localRepositoryScript in gradle.properties.
if (project.hasProperty('localRepositoryScript') && localRepositoryScript.length() > 0) {
    File repScript = new File("$localRepositoryScript")
    if (repScript.exists()) {
        apply from: "$localRepositoryScript"
    }
}

group 'de.inetsoftware'
version = '0.4.3'
archivesBaseName = 'jwebassembly-api'

//
// Allow a developer building their own version the ability to add their own appendix.
// Set theAppendix in gradle.properties in the root directory.
String archivePreferredName = null;
if (project.hasProperty('theAppendix') && theAppendix.length() > 0) {
    archivePreferredName = String.format("%s-%s", archivesBaseName, "$theAppendix")
} else {
    archivePreferredName = archivesBaseName
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compileOnly     'com.google.code.findbugs:jsr305:3.0.2'

    // dependencies for the emulator
    compileOnly     'org.ow2.asm:asm:+'
    def fxVersion = getJavaFxVersion()
    if( fxVersion > 8 ) { // version 8 is build into the OpenJDK
        // JavaFX depends the platform and JDK version
        def platform = getJavaFxPlatform()
        def modules = ['javafx-base', 'javafx-controls', 'javafx-graphics', 'javafx-media', 'javafx-web' ]
        for (String module : modules) {
            //TODO: change to String.format
            compileOnly 'org.openjfx:' + module + ':' + fxVersion + '.+:' + platform
            testImplementation 'org.openjfx:' + module + ':' + fxVersion + '.+:' + platform
        }
    }

    testImplementation     'junit:junit:+'
    testImplementation     'org.ow2.asm:asm:+'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'test'
        }
    }
}

/**
 * The String for Javafx classifier
 */
def getJavaFxPlatform() {
    def osname = System.properties['os.name'].toLowerCase()
    if( osname.contains( 'windows' ) ) {
        return 'win'
    } else if( osname.contains( 'mac' ) ) {
        return 'mac'
    }
    return 'linux'
}

/**
 * The Javafx version that is compatible with the current JDK
 */
def getJavaFxVersion() {
    def fxVersion = JavaVersion.current().getMajorVersion() as int
    if( fxVersion > 8 && fxVersion < 11 ) {
        // There is no version 9 and 10, version 8 is build into the OpenJDK
        fxVersion = 11
    }
    println 'fxVersion: ' + fxVersion
    return fxVersion;
}

jar {
    archiveAppendix.set("$theAppendix")
    manifest {
        attributes( 'Specification-Title': 'JWebAssembly-API',
                    'Specification-Vendor': 'i-net software',
                    'Specification-Version': archiveVersion,
//                    'Specification-Version': version,
                    'Implementation-Title': 'JWebAssembly-API',
                    'Implementation-Vendor': 'i-net software',
                    'Implementation-Version': archiveVersion,
//                    'Implementation-Version': version,
                    'Premain-Class': 'de.inetsoftware.jwebassembly.emulator.PremainEmulator',
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveBaseName=archivePreferredName
    archiveAppendix.set("$theAppendix")
    classifier = 'sources'
    from sourceSets.main.java
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName=archivePreferredName
    archiveAppendix.set("$theAppendix")
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// source: https://stackoverflow.com/questions/11235614/how-to-detect-the-current-os-from-gradle
// needs: import org.apache.tools.ant.taskdefs.condition.Os
// check the OS type
task checkOS() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "*** Windows OS"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        println "*** Mac OS"
    } else if ( Os.isFamily(Os.FAMILY_UNIX) ) {
        println "*** Unix OS"
    } else {
        println "*** Other OS"
    }
}

// task to list dprecated stuff in the compile
tasks.withType(JavaCompile) {
    options.deprecation = true
    options.compilerArgs += ['-Xlint:deprecation']
    options.compilerArgs += ['-Xlint:unchecked']
}

tasks.withType(PublishToMavenRepository) {
    doFirst {
        println("Publishing ${publication.groupId}:${publication.artifactId}:${publication.version} to ${repository.url}")
    }
}

build {
    dependsOn sourcesJar
    dependsOn javadocJar
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test {
    dependsOn 'jar'
    jvmArgs "-javaagent:${jar.archivePath}"
    testLogging {
        showStandardStreams = true
        showStackTraces = true
        exceptionFormat = 'full'
        events 'passed', 'skipped', 'failed'
    }
}

/****************************************
 * Deploy to Sonatype
 ****************************************/
publishing {
    publications {
        JWebAssemblyApi(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifactId archivePreferredName
            pom {
                name = 'JWebAssembly-API'
                description = 'The API for using WebAssembly features in your Java classes.'
                url = 'https://github.com/i-net-software/JWebAssembly-API'
                developers {
                    developer {
                        id = 'Horcrux7'
                        name = 'Volker Berlin'
                        email = 'vberlin@inetsoftware.de'
                        organization = 'i-net software'
                        organizationUrl = 'https://www.inetsoftware.de'
                    }
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:i-net-software/JWebAssembly-API.git'
                    developerConnection = 'scm:git:git@github.com:i-net-software/JWebAssembly-API.git'
                    url = 'https://github.com/i-net-software/JWebAssembly-API'
                }
            }
        }
    }
    repositories {
        maven {
            name 'PublicSonatype'
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            if (project.hasProperty("ossrhUsername") ) {
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

signing {
    if (project.hasProperty("signing.keyId") ){
        sign publishing.publications.JWebAssemblyApi

        // does not create sha256 and sha512 checksums
        System.setProperty('org.gradle.internal.publish.checksums.insecure', 'true' )
    }
}

